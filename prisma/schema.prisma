datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  email            String    @unique
  password         String
  stripeCustomerId String
  profileImage     String?
  phone            String?
  address          String?
  role             UserRole  @default(USER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  booking          Booking[]
  payment          Payment[]

  @@map("users")
}

model Category {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String
  mediaUrls    String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  service      Service[]

  @@map("categories")
}

model Service {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String    @db.ObjectId
  serviceName String
  price       Float
  imageUrls   String[]
  description String
  category    Category? @relation(fields: [categoryId], references: [id])
  booking     Booking[]

  @@map("services")
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  serviceId String   @db.ObjectId
  price     Float
  date      DateTime
  startTime DateTime
  endTime   DateTime
  phone     String
  paymentMethodId String
  paymentIntentId String
  status          BookingStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payment         Payment[]

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  bookingId       String   @db.ObjectId
  paymentIntentId String
  amount          Float
  paymentMethodId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  booking Booking? @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otpCode   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

enum UserRole {
  ADMIN
  USER
}

enum BookingStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  CANCELREQUEST
}
